# Generated by Django 3.2.18 on 2023-09-05 10:29

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.fields
import nautobot.extras.models.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0058_jobresult_add_time_status_idxs"),
        ("ipam", "0009_alter_vlan_name"),
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
            name='AAAARecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ipam.ipaddress')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
=======
            name="DnsZoneModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("mname", models.CharField(max_length=200)),
                ("rname", models.EmailField(max_length=254)),
                (
                    "refresh",
                    models.IntegerField(
                        default="86400",
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                (
                    "retry",
                    models.IntegerField(
                        default=7200,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                (
                    "expire",
                    models.IntegerField(
                        default=3600000,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="TXTRecordModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("text", models.CharField(max_length=256)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="NSRecordModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("server", models.CharField(max_length=200)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="MXRecordModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "preference",
                    models.IntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                ("mail_server", models.CharField(max_length=200)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="CNAMERecordModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("alias", models.CharField(max_length=200)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
>>>>>>> origin/develop
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ARecordModel",
            fields=[
<<<<<<< HEAD
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ipam.ipaddress')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
=======
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("address", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ipam.ipaddress")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
>>>>>>> origin/develop
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
<<<<<<< HEAD
            name='CNAMERecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('alias', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
=======
            name="AAAARecordModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "ttl",
                    models.IntegerField(
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("comment", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("address", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ipam.ipaddress")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnszonemodel"
                    ),
                ),
>>>>>>> origin/develop
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name='DnsZoneModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('filename', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('a_records', models.ManyToManyField(to='nautobot_dns_models.ARecordModel')),
                ('aaaa_records', models.ManyToManyField(to='nautobot_dns_models.AAAARecordModel')),
                ('cname_records', models.ManyToManyField(to='nautobot_dns_models.CNAMERecordModel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='TXTRecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('text', models.CharField(max_length=256)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='txtrecordmodel', related_query_name='txtrecordmodel', to='nautobot_dns_models.dnszonemodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='SOARecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('mname', models.CharField(max_length=200)),
                ('rname', models.EmailField(max_length=254)),
                ('refresh', models.IntegerField(default='86400', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('retry', models.IntegerField(default=7200, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('expire', models.IntegerField(default=3600000, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('serial', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2147483647)])),
                ('minimum', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='soarecordmodel', related_query_name='soarecordmodel', to='nautobot_dns_models.dnszonemodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='PTRRecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('ptrdname', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ptrrecordmodel', related_query_name='ptrrecordmodel', to='nautobot_dns_models.dnszonemodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='NSRecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('server', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nsrecordmodel', related_query_name='nsrecordmodel', to='nautobot_dns_models.dnszonemodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='MXRecordModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('ttl', models.IntegerField(default=3600, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(2147483647)])),
                ('description', models.TextField(blank=True)),
                ('comment', models.CharField(max_length=200)),
                ('preference', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)])),
                ('mail_server', models.CharField(max_length=200)),
                ('slug', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mxrecordmodel', related_query_name='mxrecordmodel', to='nautobot_dns_models.dnszonemodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.AddField(
            model_name='dnszonemodel',
            name='mx_records',
            field=models.ManyToManyField(to='nautobot_dns_models.MXRecordModel'),
        ),
        migrations.AddField(
            model_name='dnszonemodel',
            name='ns_records',
            field=models.ManyToManyField(to='nautobot_dns_models.NSRecordModel'),
        ),
        migrations.AddField(
            model_name='dnszonemodel',
            name='ptr_records',
            field=models.ManyToManyField(to='nautobot_dns_models.PTRRecordModel'),
        ),
        migrations.AddField(
            model_name='dnszonemodel',
            name='soa_record',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nautobot_dns_models.soarecordmodel'),
        ),
        migrations.AddField(
            model_name='dnszonemodel',
            name='tags',
            field=taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag'),
        ),
        migrations.AddField(
            model_name='cnamerecordmodel',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cnamerecordmodel', related_query_name='cnamerecordmodel', to='nautobot_dns_models.dnszonemodel'),
        ),
        migrations.AddField(
            model_name='arecordmodel',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arecordmodel', related_query_name='arecordmodel', to='nautobot_dns_models.dnszonemodel'),
        ),
        migrations.AddField(
            model_name='aaaarecordmodel',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='aaaarecordmodel', related_query_name='aaaarecordmodel', to='nautobot_dns_models.dnszonemodel'),
        ),
    ]
