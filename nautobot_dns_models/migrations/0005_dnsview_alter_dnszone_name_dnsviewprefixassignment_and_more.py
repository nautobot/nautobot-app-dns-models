# Generated by Django 4.2.24 on 2025-10-03 18:57

import uuid

import django.core.serializers.json
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
from django.db import migrations, models

import nautobot_dns_models.models


def set_default_dns_view(apps, schema_editor):
    """Return the PK of the default DNSView, creating it if necessary."""
    default_dns_view = nautobot_dns_models.models.get_default_view_pk()
    DNSZone = apps.get_model("nautobot_dns_models", "DNSZone")
    DNSZone.objects.filter(dns_view__isnull=True).update(dns_view=default_dns_view)


def reverse_default_dns_view(apps, schema_editor):
    """Set all DNSZone.dns_view to null."""
    DNSZone = apps.get_model("nautobot_dns_models", "DNSZone")
    DNSZone.objects.update(dns_view=None)


class Migration(migrations.Migration):
    dependencies = [
        ("extras", "0122_add_graphqlquery_owner_content_type"),
        ("ipam", "0051_added_optional_vrf_relationship_to_vdc"),
        ("nautobot_dns_models", "0004_rename_aaaarecordmodel_aaaarecord_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="DNSView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "DNS View",
                "verbose_name_plural": "DNS Views",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.AlterField(
            model_name="dnszone",
            name="name",
            field=models.CharField(max_length=200),
        ),
        migrations.CreateModel(
            name="DNSViewPrefixAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "dns_view",
                    nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_dns_models.dnsview"
                    ),
                ),
                (
                    "prefix",
                    nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                        on_delete=django.db.models.deletion.CASCADE, to="ipam.prefix"
                    ),
                ),
            ],
            options={
                "verbose_name": "DNS View Prefix Assignment",
                "verbose_name_plural": "DNS View Prefix Assignments",
                "unique_together": {("dns_view", "prefix")},
            },
        ),
        migrations.AddField(
            model_name="dnsview",
            name="prefixes",
            field=models.ManyToManyField(
                blank=True,
                related_name="dns_views",
                through="nautobot_dns_models.DNSViewPrefixAssignment",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="dnsview",
            name="tags",
            field=nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="dns_view",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="nautobot_dns_models.dnsview"
            ),
        ),
        migrations.RunPython(set_default_dns_view, reverse_code=reverse_default_dns_view),
        migrations.AlterField(
            model_name="dnszone",
            name="dns_view",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                default=nautobot_dns_models.models.get_default_view_pk,
                on_delete=django.db.models.deletion.PROTECT,
                to="nautobot_dns_models.dnsview",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dnszone",
            unique_together={("name", "dns_view")},
        ),
    ]
